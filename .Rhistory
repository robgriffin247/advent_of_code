library(data.table)
source('../getter.R') # see https://stackoverflow.com/a/77583836/1040035
library(data.table)
source('getter.R') # see https://stackoverflow.com/a/77583836/1040035
# Part 1 -----------------------------------------------------------------------
calibration_values <- get_aoc(1, 2023) # download data as a text string (ask if you want get_aoc() source code)
sum(sapply(tstrsplit(calibration_values, '\n'), function(value){
value_digits <- gsub('[^0-9.-]', '', value)
as.numeric(paste0(strsplit(value_digits, '')[[1]][c(1, nchar(value_digits))], collapse=''))
}))
# Part 2 -----------------------------------------------------------------------
calibration_values <- get_aoc(1, 2023)
numbers <- c('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine')
names(numbers) <- 1:9
# This will swap strings of numbers (e.g. one) to one1one.
#  - Digit is sandwiched with original string to handle overlap
#      e.g. twone should be 21, but changing one to 1 would give tw1, while
#           the looped sandwich approach gives twone1one first, then 21
for(number in numbers){
calibration_values <- gsub(number,
paste0(number, names(numbers)[numbers==number], number),
calibration_values)
}
sum(sapply(tstrsplit(calibration_values, '\n'), function(value){
value_digits <- gsub('[^0-9.-]', '', value)
as.numeric(paste0(strsplit(value_digits, '')[[1]][c(1, nchar(value_digits))], collapse=''))
}))
getwd()
dir.create('data')
dir.create('data/aoc2023')
library(httr)
session <- '53616c7465645f5fa84d9a2bcf370ca36123953f95972af75a9f05096890e9e0b9607a39917472bfd7488f1d371946f51e8221d257940d11bf50db994146ff0c'
get_aoc <- function(day, year, ck=session){
rawToChar(GET(paste0('https://adventofcode.com/', year,'/day/', day, '/input'),
set_cookies(session=ck))$content)
}
get_aoc <- function(day, year, ck=session){
data.table::fwrite(
rawToChar(GET(paste0('https://adventofcode.com/', year,'/day/', day, '/input'),
set_cookies(session=ck))$content),
file=paste0('data/aoc', year,'/day',sprintf('%02.f', day)),
header=FALSE
}
library(data.table)
source('getter.R') # see https://stackoverflow.com/a/77583836/1040035
# Part 1 -----------------------------------------------------------------------
calibration_values <- get_aoc(1, 2023) # download data as a text string (ask if you want get_aoc() source code)
library(data.table)
source('getter.R') # see https://stackoverflow.com/a/77583836/1040035
# Part 1 -----------------------------------------------------------------------
calibration_values <- get_aoc(1, 2023) # download data as a text string (ask if you want get_aoc() source code)
sum(sapply(tstrsplit(calibration_values, '\n'), function(value){
value_digits <- gsub('[^0-9.-]', '', value)
as.numeric(paste0(strsplit(value_digits, '')[[1]][c(1, nchar(value_digits))], collapse=''))
}))
# Part 2 -----------------------------------------------------------------------
calibration_values <- get_aoc(1, 2023)
numbers <- c('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine')
names(numbers) <- 1:9
# This will swap strings of numbers (e.g. one) to one1one.
#  - Digit is sandwiched with original string to handle overlap
#      e.g. twone should be 21, but changing one to 1 would give tw1, while
#           the looped sandwich approach gives twone1one first, then 21
for(number in numbers){
calibration_values <- gsub(number,
paste0(number, names(numbers)[numbers==number], number),
calibration_values)
}
sum(sapply(tstrsplit(calibration_values, '\n'), function(value){
value_digits <- gsub('[^0-9.-]', '', value)
as.numeric(paste0(strsplit(value_digits, '')[[1]][c(1, nchar(value_digits))], collapse=''))
}))
